<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tony_Haibo_Zhu's Blog]]></title>
  <link href="http://tony-haibo-zhu.github.io/atom.xml" rel="self"/>
  <link href="http://tony-haibo-zhu.github.io/"/>
  <updated>2016-05-19T22:40:43+08:00</updated>
  <id>http://tony-haibo-zhu.github.io/</id>
  <author>
    <name><![CDATA[Tony-Haibo-Zhu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Generator of Python]]></title>
    <link href="http://tony-haibo-zhu.github.io/blog/2016/04/19/generator-of-python/"/>
    <updated>2016-04-19T21:42:39+08:00</updated>
    <id>http://tony-haibo-zhu.github.io/blog/2016/04/19/generator-of-python</id>
    <content type="html"><![CDATA[<p>近日，趁着找工作的间隙，了解了一下Python中一直让我不解的generator。现在特此写一篇博客记录下来自己的理解，也好让自己理解的透彻一点吧。</p>

<h5>环境：Python3.4</h5>

<!--more-->


<p>(这篇文章只是用于个人以后回顾来看，所以只会针对自己当时没有理解的点来叙述，而并不是要从零开始讲generator)</p>

<h3>先举个普通function的栗子。</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def fun_ton(value):
</span><span class='line'>    return value
</span><span class='line'>
</span><span class='line'>f = fun_ton
</span><span class='line'>
</span><span class='line'>print(f)
</span><span class='line'>&lt;function fun_ton at 0x7f5c6a90c7b8&gt;
</span><span class='line'>
</span><span class='line'>f = fun_ton(10)
</span><span class='line'>
</span><span class='line'>print(f)
</span><span class='line'>10</span></code></pre></td></tr></table></div></figure>


<p>在上面这个例子的输出中，可看到，在<code>f = fun_ton</code>之后，f是个普通的function；在<code>f = fun_ton(10)</code>之后，f是一个返回的value（也就是说，方法已经执行并执行完了！这点尤为重要我认为）</p>

<h3>而再举个generator的栗子</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def gen():
</span><span class='line'>    while True:
</span><span class='line'>        value = yield
</span><span class='line'>        print(value)
</span><span class='line'>            
</span><span class='line'>g = gen
</span><span class='line'>print(g)
</span><span class='line'>&lt;function gen at 0x7f5c6a90cf28&gt;
</span><span class='line'>
</span><span class='line'>g = gen()  
</span><span class='line'>print(g)
</span><span class='line'>&lt;generator object gen at 0x7f5c6a90b2d0&gt;
</span><span class='line'>
</span><span class='line'>g.send(1)
</span><span class='line'>---------------------------------------------------------------------------
</span><span class='line'>TypeError                                 Traceback (most recent call last)
</span><span class='line'>&lt;ipython-input-20-41df5ae58f24&gt; in &lt;module&gt;()
</span><span class='line'>----&gt; 1 g.send(1)
</span><span class='line'>
</span><span class='line'>TypeError: can't send non-None value to a just-started generator
</span></code></pre></td></tr></table></div></figure>


<p>在上面这个例子的输出中，可看到。在<code>g = gen</code>之后，仍旧是个function，（之前我一直认为只要是函数体内有yield，这里就应该输出generator了，而现在看来并不是），而在<code>g = gen()</code>之后，g才是一个generator。（暂且不管为什么，我们先往下看）。
执行<code>g.send(1)</code>，然后就是初识generator的熟悉的错误了。查询N多文章之后，得出的结论是，<code>send(value)</code>（value不为None）的使用环境一定是让generator执行到yield之后。所以，虽然在普通的funciton中,<code>f = fun_ton(value)</code>是执行函数的意思，但是在generator中看来，<code>g = gen()</code>并不是执行的意思，而是创建（或者相当于这个意思）。这样，在一个generator中，才需要用<code>next()</code>方法或者<code>send(None)</code>方法来让generator启动。
有了上面这段理解，至少在现阶段理解generator不那么让人摸不着头脑了。</p>

<h3>参考</h3>

<ul>
<li><a href="http://kissg.me/2016/04/09/python-generator-yield/">Python之生成器详解</a></li>
<li><a href="https://jeffknupp.com/blog/2013/04/07/improve-your-python-yield-and-generators-explained/">Improve Your Python: &lsquo;yield&rsquo; and Generators Explained</a></li>
<li>以及StackOverflow上的问答。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[对Python高阶函数的一些理解]]></title>
    <link href="http://tony-haibo-zhu.github.io/blog/2016/03/23/%E5%AF%B9python%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/"/>
    <updated>2016-03-23T08:59:16+08:00</updated>
    <id>http://tony-haibo-zhu.github.io/blog/2016/03/23/对python高阶函数的一些理解</id>
    <content type="html"><![CDATA[<p>本人是一名Java程序员，在最近学习python的过程中，因为思维惯性和没有认真理解python的概念，导致很多例子混淆。现在写下这篇笔记，让自己以后在回头看看的时候也有个参考。LoL。。。。。</p>

<h5>python版本：3.4.3</h5>

<h5>python交互环境：ipython</h5>

<h5>环境：Ubuntu14.04 LTS</h5>

<!--more-->


<p>首先，在Python这种解释型语言中，要搞明白函数，和函数调用的区别。例如，在python中有一个内置的求绝对值的函数“abs”。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>In[1]: abs
</span><span class='line'>Out[2]:&lt;function abs&gt;
</span><span class='line'>
</span><span class='line'>In[2]:abs()
</span><span class='line'>---------------------------------------------------------------------------
</span><span class='line'> TypeError                                 Traceback (most recent call last)
</span><span class='line'> &lt;ipython-input-3-3a546e8778c7&gt; in &lt;module&gt;()
</span><span class='line'> ----&gt; 1 abs()
</span><span class='line'>
</span><span class='line'> TypeError: abs() takes exactly one argument (0 given)
</span></code></pre></td></tr></table></div></figure>


<p>以上例子中，在输入<code>abs</code>时，交互环境表示这是一个function,而在输入<code>abs()</code>时,交互环境报错，提示应该传入一个参数但是实际给了0个（这个翻译有点蹩脚）。这里就说明在输入<code>abs()</code>时，实际上已经调用了abs()函数，而不是仅仅表示这个函数。Ok，在讲清楚了这点之后，后面就好理解了。</p>

<p>在python中，变量可以指向函数，也就是用变量代表函数，而在Java中，这个是不可以的。例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>In[2]: f = abs
</span><span class='line'>
</span><span class='line'>In[3]: f
</span><span class='line'>Out[3]: &lt;function abs&gt; 
</span><span class='line'>
</span><span class='line'>In[4]: f(-1)
</span><span class='line'>Out[4]:1</span></code></pre></td></tr></table></div></figure>


<p>在上面的例子中，在将f指向abs函数后，可以通过f()的方式同样调用abs()函数。</p>

<p>这些只是高阶函数的冰山一角，高阶函数的特性还允许将函数作为参数传入另一个函数，和把一个函数作为返回值返回，闭包等等。时间有限，暂且不表，在以后的笔记中再介绍吧。</p>

<h3>参考</h3>

<p>最后，推荐一个很好的学习python的网站。</p>

<ul>
<li><a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014317849054170d563b13f0fa4ce6ba1cd86e18103f28000">廖雪峰的python3教程-高阶函数</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浅谈MyEclipse和Idea中Tomcat的部署方式以及在项目中设置上下文的相关]]></title>
    <link href="http://tony-haibo-zhu.github.io/blog/2015/12/08/%E6%B5%85%E8%B0%88MyEclipse%E5%92%8CIdea%E4%B8%ADTomcat%E7%9A%84%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F/"/>
    <updated>2015-12-08T18:40:44+08:00</updated>
    <id>http://tony-haibo-zhu.github.io/blog/2015/12/08/浅谈MyEclipse和Idea中Tomcat的部署方式</id>
    <content type="html"><![CDATA[<p>年底终于可以在繁重的开发任务上喘一口气，决定用一些新东西来重构老项目。有些平时没有追究的细节问题在一个人开发时，由于没有了别人的参考，被坑的还是很惨的，现在特此记录下来，希望给同样有疑惑的人一个参考吧。</p>

<h5>开发工具：IDEA14 +Tomcat7（其他的和本文无太大关系，故不介绍&hellip;.）</h5>

<h5>开发环境：struts2（其他的和本文无关，故不介绍）</h5>

<p>（看本文前如果有不知道Tomcat几种部署方式的请自行谷歌。）</p>

<!--more-->


<p>Tomcat部署项目有三种方式，这种讲解说明的教程在网上一抓一大把。而MyEclipse和Idea分别采用了不同的部署项目方式。</p>

<h3>MyEclipse部署项目。</h3>

<ul>
<li>从目录结构上看，MyEclipse部署项目就是用了最简单粗暴的一种。如果用MyEclipse关联了本地的Tomcat，那么部署就是直接将解压后的war包目录扔到了webapps里，然后启动。这种方式最简单直接，对于一开始使用的初学者来说也比较容易懂。</li>
</ul>


<h3>Idea部署项目</h3>

<p>大家已经都清楚，Tomcat有一种部署方式是在服务器目录下的<code>conf/Catalina/localhost</code>(如果你使用了这个地址访问你的项目)下生成一个xml文件，文件的名称可以随意指定，但是里面的内容决定了你访问项目的上下文名称以及项目的物理地址。
而Idea正是用了这种方式，当你在ide中给服务器指定了项目的物理地址以及访问上下文并启动服务器之后，在你的idea安装目录下（一般是主目录下的隐藏文件夹IntelliJIdea14）的<code>system/tomcat/xxx(你的项目或者模块名称)/conf/Catalina/localhost</code>下也生成一个xml文件。（如果你没有设置上下文，那么这个xml就叫<code>ROOT.xml</code>，否则，就叫你设置的那个名字。）里面通过节点记录了你刚才设置的相关值。这种方式会比较绕，但是在后期便于管理，尤其是像idea这种模块概念分明的ide。</p>

<h3>web项目目录结构</h3>

<p>在标准的MVC模型的建议中，把页面文件（jsp或者freemarker或者其他）放在web-inf下是安全的行为。但是这只是规范，或者一种标准，要是不遵守也没有逻辑上的问题。下面就来说说放在web-inf中的情况下，实际访问的目录结构是什么样的。</p>

<p>如果你放到webinf中，是通过struts2等方式请求的。那在访问项目后服务器端的结构就变成了<code>/project/namespace/xxxxx.do</code>。（读者要是不明白可以自行打开浏览器的debugger看）。project是我设置的上下文根，你要不设置就没有这一层，<code>namespace/xxxxx.do</code>是你通过struts2访问页面的请求路径。也就是说，目录结构并不像你在开发环境看到的，其实已经没有了web-inf这一层，（这也是一直我在页面引用js引用不到的原因）。所以你当你在页面使用相对路径引用css文件时，就用<code>../</code>跳出上一级目录就能引用到。（前提是你把css或者js文件别放在webinf中）。
如果你使用的是以<code>/</code>开头的绝对路径，那么在你设置了上下根之后，引用时需要加上你的上下文名称，因为jsp等页面在写<code>/</code>时实际上引用到了服务器根路径下，所以你的写法应该是<code>/project/xxx.js</code>。如果你没有设置上下根，那么直接就写<code>/xxx.js</code>就好。</p>

<h3>总结</h3>

<p>其实在这次问题中主要绊倒我的就是在页面放到webinf之后，不知道怎么写外部js的引用路径问题。最后通过浏览器的调试得知项目的目录，问题才得以解决。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[折腾Octopress的一点心得]]></title>
    <link href="http://tony-haibo-zhu.github.io/blog/2015/11/20/%E6%8A%98%E8%85%BEOctopress%E7%9A%84%E4%B8%80%E7%82%B9%E5%BF%83%E5%BE%97/"/>
    <updated>2015-11-20T16:51:05+08:00</updated>
    <id>http://tony-haibo-zhu.github.io/blog/2015/11/20/折腾Octopress的一点心得</id>
    <content type="html"><![CDATA[<p>折腾这款博客框架已经来来回回有一个多月了，网上的“教程”鱼龙混杂，以至于其中走了不少弯路（其实也让我对Ruby和Git的一些机制产生更加深刻的理解）。趁着这次出差事情不多，粗略的记录一下安装过程以及详细的爬坑过程吧。</p>

<h5>环境：Ubuntu14.04 LTS</h5>

<h5>Ruby版本：1.9.3（官方推荐的是1.9.2，但是小版本的变动应该无伤大雅，至少在这个项目上暂时没发现什么坑）</h5>

<h5>Gem版本：2.4.8</h5>

<h5>Git版本：1.9.1</h5>

<!--more-->


<p>网上的Octopress有很多都是附带讲解了如何安装Ruby及相关，但是个人情况不同，所以有很多不同问题出现让人困惑。这里建议直接去RubyChina的论坛中查找安装ruby环境的教程，那里的更加细致。<a href="https://ruby-china.org/wiki/install_ruby_guide">RubyChina：如何快速正确的安装 Ruby, Rails 运行环境</a> （这里不是缺点的缺点有两个。首先，你必须是Ubuntu或者Mac；其次，里面有一些安装库的地址已经变了，你得自己去论坛里问别人，但这也利于你培养学习的习惯。）</p>

<p>（安装完环境之后记得把gem的更新源换成国内的，这样速度很好很多，也不容易被和谐）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem sources -a https://ruby.taobao.org/
</span><span class='line'>gem sources -r https://rubygems.org/
</span><span class='line'>gem sources -l</span></code></pre></td></tr></table></div></figure>


<p>如果出现</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*** CURRENT SOURCES ***
</span><span class='line'>
</span><span class='line'>https://ruby.taobao.org/</span></code></pre></td></tr></table></div></figure>


<p>那么说明更换成功。
（有些教程上是http，可能是以前能访问，但是现在更新某些东西时无法访问）</p>

<p>等你的环境都准备好了就可以开始从git上拿下来Octopress的项目了。</p>

<h3>1. 克隆项目。</h3>

<p>找到你想克隆的文件夹，输入命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/imathis/octopress.git  octopress</span></code></pre></td></tr></table></div></figure>


<p>后面的octopress可以随便写，这是项目clone下来存在于文件系统的名称。（你可以理解为clone下来的文件夹名称）</p>

<h3>2. 更换使用的ruby版本以及项目的Gem更新地址。</h3>

<ul>
<li>进入octopress，进来的第一件事是使用rvm（或者你安装的ruby版本管理器是rbenv）命令把正在只用的ruby换成这个项目需要的版本，我的是</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rvm use 1.9.3@rails31</span></code></pre></td></tr></table></div></figure>


<p>再次声明此项目官方文档中是需要用ruby1.9.2，也就是是说这条命令需要你根据自己安装的环境自己定制。</p>

<ul>
<li>第二件事是更换掉Gemfile里面的源，打开Gemfile把最上面那行的地址也换成<code>https://ruby.taobao.org/</code>，原因与上面换Gem的源一样。

<h3>3.安装依赖。</h3>

<p>  依次输入以下命令：</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install bundler
</span><span class='line'>bundle update</span></code></pre></td></tr></table></div></figure>


<p>在安装依赖的时候肯定会有一些红色或者黄色的提示一些父类依赖没有安装以致项目所需的依赖无法安装，那么遵循给出的依赖名称在命令行输入bundler intall xxxx(依赖名称)，然后再一次执行bundle update。这样一直到出现绿色的提示Bundle updated!为止。</p>

<h3>4.生成站点和博客。依次执行。</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake install
</span><span class='line'>rake generate</span></code></pre></td></tr></table></div></figure>


<ul>
<li>第一个命令是用来安装Octopress默认主题的。</li>
<li>第二个命令是生成站点静态页面的。</li>
</ul>


<p>有兴趣的同学可以看这两个命令执行时rake都帮我们执行了哪些命令来创建这些东西。当然你要是觉得眼花缭乱可以选择不让它输出，但是命令我不会告诉你，自己去找。</p>

<h3>5.生成测试博客。</h3>

<p>执行到这里你的站点基本搭建就已经完毕了，接下来你可以生成一片测试博客以供一会预览看到效果。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post['ThisIsTestBlog']</span></code></pre></td></tr></table></div></figure>


<p>这是生成基本博客模板的命令。通过输出可以看到，在source下创建了_posts文件夹，然后<code>Creating new post :source/_posts/年-月-日-ThisIsTestBlog.markdown</code>，这就是你的测试博客文章，要添加文字就在这个文件里。</p>

<h3>6.预览。到这里你就已经成功了一半，Octopress提供了本地预览（部署）博客命令。</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake preview</span></code></pre></td></tr></table></div></figure>


<p>这个命令我将它理解为启动本地跑Octopress的服务器，接下来你会看到一些输出，（做javaEE开发的可以近似的将之理解为Tomcat启动时的那些基本输出），接着你在浏览器输入地址<code>localhost:4000/</code>,如果你的命令执行的没问题，那么你可以立即看到浏览器收到回应开始加载，如果浏览器一直处于请求阶段，没有回应，那么就说明你的命令执行的有问题。（特别提示：我之前一直没有部署成功，仔细检查部署命令后的那些输出，发现很多Error的输出，去stackoverflow才找到的答案，最常见的就是xxxx依赖没有安装。如果你的命令执行完之后出现了很多输出，那就可以断定是有问题，因为成功的部署的输出只有十来行。）</p>

<h3>7.申请仓库。</h3>

<p>你的博客不可能只有你一个人或者只让本地的人看，所以你将之放到Github上去供更多的人浏览，你需要一个放博客的Repo。
在Github申请仓库，这部对于经常玩Github的同学应该很熟了。（怎样申请Github不是本文的重点，比注册邮箱还要简单）。但是重点来了：</p>

<ul>
<li><p>这也是之前一直让我困恼很久的问题！申请仓库的格式必须是：github用户名+github.io。比如你在github叫zhangsan，那么你的仓库名称应该是：<code>zhangsan.github.io</code>，一定是这个名称，不然你输入你博客的域名永远都是404！（最开始有些人说是部署有时间延迟，不会立即生效，要等一段时间，结果我等了一个星期，等来的却是404。正确的部署之后延迟只是几分钟，至少我后来部署了不下于5遍，没有一次延迟超过五分钟）</p></li>
<li><p>仓库名称一定是以io结尾。有些老教程上说一定不要以io结尾，但是github后来好像有一次改版，把这种项目的名称都限定以io结尾，并且octopress的官方部署教程也更新为要以io结尾,如果你不用这种命名方式，等你的依然是404。<a href="http://octopress.org/docs/deploying/github/">Octopress官方文档</a></p></li>
</ul>


<h3>8.关联。这是成功前的倒数第二步，关联你的本地博客和仓库。</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>接着把你的仓库地址粘贴上去，可以SSL的那个仓库地址，也可以用HTTP的那个仓库地址。
这部产生的输出是强烈建议去研究一下的。项目首先将git的默认地址改为你的仓库地址（之前默认的是octopress官方Github仓库地址），这样推送就是往你的仓库里推了，然后将原先的master分支（原先仓库地址的master分支）改名为source（这个source是给你以后放源代码用的）。</p>

<h4>9.把你的博客部署到Github上去。</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<p>查看输出，发现其实部署的内容都放在了一个项目根下一个叫<em>deploy的文件夹中，然后在</em>deploy中生成了一个master分支，这个master分支不同于上一步的原生master分支，是专门放你部署的内容的，你当然不用手动利用git命令给这个分支推送，因为rake deploy命令就是干这个的。
我有个一直的疑惑就是，第一次和远程库关联这个master分支会出现提示输出<code>....no tracking information , if you want to specify ...., fix it with --set-upstream-to branch origin/&lt;branch&gt;</code>。（大概就是这些，我记不太清了）。读了廖雪峰老师的<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013760174128707b935b0be6fc4fc6ace66c4f15618f8d000">Git新手教程</a>的多人协作部分，我的理解是，这个命令的部署的机制是，先把远程库里这个分支的最新内容拉下来合并（多人协作开发为了避免冲突都是这样）。而此时的远程库中并没有这个分支，所以出现了这个分支没有上游的提示。以后就没有了。（不知道我的理解对不对，欢迎讨论）。之后再把新生成的东西一并推送到远程库中。
再过五分钟，你就可以访问你在Github上的博客了，域名就是你的仓库名称：<code>http://zhangsan.github.io</code></p>

<h3>10.将源码及配置文件放到Github上去。</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m 'your annotation'
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>


<p>如果你不想你的源代码无故丢失，那么每次写完文章或者配置了新的属性那么将源文件及时推送到Github上去是个好习惯。</p>

<h3>总结</h3>

<p>好了，到这里本次Octopress配置就要告一段落了，剩下的就只是优化，网上的教程有很多。提升访问速度就是去掉跟谷歌和Twitter的相关设置以及将ajax的源文件换成国内的链接；美化的教程更是数不胜数，就不在这里多赘述了。通过研究这个项目最重要的是让我对Ruby和Git有了更深的了解。最后祝本文的读者在Octopress玩的开心。^.^&hellip;</p>

<h3>参考</h3>

<ul>
<li><p>修改_config.yml文件以及ajax源提升访问速度：<a href="http://www.leichunfeng.com/blog/2014/11/11/use-octopress-plus-github-pages-to-setup-a-personal-blog/">使用 Octopress+GitHub Pages 搭建个人博客</a></p></li>
<li><p>美化Octopress：<a href="http://blog.lessfun.com/blog/2013/12/05/config-the-octopress-blog-after-deployed/">Octopress博客发布后的基本配置、继续阅读、自动打开、代码高亮&hellip;.</a></p></li>
</ul>

]]></content>
  </entry>
  
</feed>
